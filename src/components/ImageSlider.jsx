import React, { useRef, useEffect, useState, useCallback } from "react";
import gsap from "gsap";
import "./ImageSlider.css";

export const ImageSlider = ({ slides, scrollerRef }) => {
Â  const containerRef = useRef(null);
Â  const [activeIndex, setActiveIndex] = useState(0);
Â  const slidesRef = useRef([]); 
Â  const animationTimeline = useRef(null);

Â  const numSlides = slides.length;

Â  const animateSlide = useCallback((newIndex, direction) => {
Â  Â  if (newIndex === activeIndex || slidesRef.current.length < numSlides) return;

Â  Â  const outgoingIndex = activeIndex; 
Â  Â  const currentSlide = slidesRef.current[outgoingIndex];
Â  Â  const nextSlide = slidesRef.current[newIndex];
Â  Â  
Â  Â  if (!currentSlide || !nextSlide) return;

Â  Â  if (animationTimeline.current && animationTimeline.current.isActive()) {
Â  Â  Â  animationTimeline.current.kill();
Â  Â  }

Â  Â  // Video animation uses deep perspective:
Â  Â  // Outgoing slide moves to bottom-right, new slide comes from bottom-right.
Â  Â  
Â  Â  const totalSlideWidth = window.innerWidth;
Â  Â  const totalSlideHeight = window.innerHeight;

Â  Â  // ðŸ’¥ CHANGE 4: Exit position is significantly to the bottom right and further back (z)
Â  Â  const exitX = totalSlideWidth * 0.8;
Â  Â  const exitY = totalSlideHeight * 0.5;
Â  Â  const exitZ = -200; // Push back in Z-space

Â  Â  // ðŸ’¥ CHANGE 5: Rotation values for the inactive/exiting state (Deep 3D Tilt)
Â  Â  const inactiveRotateX = -15; // Tilts top edge away
Â  Â  const inactiveRotateY = 15; // Tilts left edge away
Â  Â  const inactiveRotateZ = 0; // No Z-axis rotation (flat plane)

Â  Â  animationTimeline.current = gsap.timeline({
Â  Â  Â  onComplete: () => {
Â  Â  Â  Â  // Reset the outgoing slide to the far-off inactive state
Â  Â  Â  Â  gsap.set(currentSlide, {
Â  Â  Â  Â  Â  x: exitX, 
Â  Â  Â  Â  Â  y: exitY,
Â  Â  Â  Â  Â  z: exitZ, 
Â  Â  Â  Â  Â  scale: 0.6, 
Â  Â  Â  Â  Â  rotationX: inactiveRotateX, 
Â  Â  Â  Â  Â  rotationY: inactiveRotateY,
Â  Â  Â  Â  Â  rotation: inactiveRotateZ,
Â  Â  Â  Â  Â  opacity: 0,
Â  Â  Â  Â  Â  zIndex: 1,
Â  Â  Â  Â  });
Â  Â  Â  Â  setActiveIndex(newIndex);
Â  Â  Â  },
Â  Â  });

Â  Â  // 1. Current slide exit (moves out to bottom-right and shrinks/tilts)
Â  Â  // The active slide moves slightly down and right, and tilts away as it exits.
Â  Â  animationTimeline.current.to(currentSlide, {
Â  Â  Â  x: exitX, 
Â  Â  Â  y: exitY,
Â  Â  Â  z: exitZ, 
Â  Â  Â  scale: 0.6, 
Â  Â  Â  rotationX: inactiveRotateX, 
Â  Â  Â  rotationY: inactiveRotateY,
Â  Â  Â  rotation: inactiveRotateZ,
Â  Â  Â  opacity: 0, 
Â  Â  Â  zIndex: 1, 
Â  Â  Â  duration: 1.0, 
Â  Â  Â  ease: "power4.inOut", // Stronger ease for dramatic feel
Â  Â  }, 0); 

Â  Â  // 2. Next slide entry (comes in from bottom-right, expands/straightens)
Â  Â  animationTimeline.current.fromTo(nextSlide, 
Â  Â  Â  { 
Â  Â  Â  Â  x: exitX, 
Â  Â  Â  Â  y: exitY,
Â  Â  Â  Â  z: exitZ, 
Â  Â  Â  Â  scale: 0.6, 
Â  Â  Â  Â  rotationX: inactiveRotateX, 
Â  Â  Â  Â  rotationY: inactiveRotateY,
Â  Â  Â  Â  rotation: inactiveRotateZ,
Â  Â  Â  Â  opacity: 0, // Start fully transparent
Â  Â  Â  Â  zIndex: 2, 
Â  Â  Â  }, 
Â  Â  Â  {
Â  Â  Â  Â  x: 0, 
Â  Â  Â  Â  y: 0,
Â  Â  Â  Â  z: 0,
Â  Â  Â  Â  scale: 1, 
Â  Â  Â  Â  rotationX: 0, 
Â  Â  Â  Â  rotationY: 0,
Â  Â  Â  Â  rotation: 0,
Â  Â  Â  Â  opacity: 1, 
Â  Â  Â  Â  zIndex: 2, 
Â  Â  Â  Â  duration: 1.0,
Â  Â  Â  Â  ease: "power4.inOut",
Â  Â  Â  }, 0); 
Â  }, [activeIndex, numSlides, slidesRef]);


Â  // Navigation Handlers (Carousel style: wrap around) - NO CHANGE
Â  const nextSlide = useCallback(() => {
Â  Â  const newIndex = (activeIndex + 1) % numSlides;
Â  Â  animateSlide(newIndex, 'next');
Â  }, [activeIndex, numSlides, animateSlide]);

Â  const prevSlide = useCallback(() => {
Â  Â  const newIndex = (activeIndex - 1 + numSlides) % numSlides;
Â  Â  animateSlide(newIndex, 'prev');
Â  }, [activeIndex, numSlides, animateSlide]);

// --- INITIALIZATION EFFECT ---
Â  useEffect(() => {
Â  Â  if (slidesRef.current.length !== numSlides || numSlides === 0) return; 

Â  Â  const slidesEls = slidesRef.current;
Â  Â  const totalSlideWidth = window.innerWidth;
Â  Â  const totalSlideHeight = window.innerHeight;


Â  Â  // ðŸ’¥ CHANGE 6: Initial 3D state for all inactive slides
Â  Â  const inactiveRotateX = -15; 
Â  Â  const inactiveRotateY = 15; 
Â  Â  const inactiveRotateZ = 0; 

Â  Â  const exitX = totalSlideWidth * 0.8;
Â  Â  const exitY = totalSlideHeight * 0.5;
Â  Â  const exitZ = -200; 

Â  Â  // 1. Set all slides off-screen/inactive state
Â  Â  gsap.set(slidesEls, {
Â  Â  Â  x: exitX, 
Â  Â  Â  y: exitY,
Â  Â  Â  z: exitZ, 
Â  Â  Â  scale: 0.6, 
Â  Â  Â  rotationX: inactiveRotateX, 
Â  Â  Â  rotationY: inactiveRotateY,
Â  Â  Â  rotation: inactiveRotateZ, 
Â  Â  Â  opacity: 0,
Â  Â  Â  zIndex: 1,
Â  Â  Â  transformOrigin: "center center",
Â  Â  });
Â  Â  
Â  Â  // 2. Set the FIRST slide visible/centered immediately (active state)
Â  Â  gsap.set(slidesEls[0], {
Â  Â  Â  x: 0, 
Â  Â  Â  y: 0,
Â  Â  Â  z: 0,
Â  Â  Â  scale: 1, 
Â  Â  Â  rotationX: 0, 
Â  Â  Â  rotationY: 0,
Â  Â  Â  rotation: 0, 
Â  Â  Â  opacity: 1, 
Â  Â  Â  zIndex: 2,
Â  Â  });

Â  }, [numSlides]); 

// --- SCROLL/SWIPE LISTENER EFFECT & CONTENT UPDATE EFFECT (UNMODIFIED) ---
Â  useEffect(() => {
Â  Â  const container = containerRef.current;
Â  Â  if (!container) return;
Â  Â  
Â  Â  let touchStartX = 0;
Â  Â  const swipeThreshold = 50; 

Â  Â  const isAnimating = () => animationTimeline.current && animationTimeline.current.isActive();

Â  Â  const handleTouchStart = (e) => {
Â  Â  Â  touchStartX = e.touches[0].clientX;
Â  Â  };

Â  Â  const handleTouchEnd = (e) => {
Â  Â  Â  if (isAnimating()) return;

Â  Â  Â  const touchEndX = e.changedTouches[0].clientX;
Â  Â  Â  const deltaX = touchEndX - touchStartX;

Â  Â  Â  if (Math.abs(deltaX) > swipeThreshold) {
Â  Â  Â  Â  if (deltaX < 0) {
Â  Â  Â  Â  Â  nextSlide();
Â  Â  Â  Â  } else if (deltaX > 0) {
Â  Â  Â  Â  Â  prevSlide();
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  };

Â  Â  const handleWheel = (e) => {
Â  Â  Â  if (Math.abs(e.deltaX) > Math.abs(e.deltaY) && Math.abs(e.deltaX) > 10) {
Â  Â  Â  Â  e.preventDefault(); 
Â  Â  Â  Â  if (isAnimating()) return;

Â  Â  Â  Â  if (e.deltaX > 0) {
Â  Â  Â  Â  Â  nextSlide();
Â  Â  Â  Â  } else if (e.deltaX < 0) {
Â  Â  Â  Â  Â  prevSlide();
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  };

Â  Â  container.addEventListener('touchstart', handleTouchStart);
Â  Â  container.addEventListener('touchend', handleTouchEnd);
Â  Â  container.addEventListener('wheel', handleWheel, { passive: false });

Â  Â  return () => {
Â  Â  Â  container.removeEventListener('touchstart', handleTouchStart);
Â  Â  Â  container.removeEventListener('touchend', handleTouchEnd);
Â  Â  Â  container.removeEventListener('wheel', handleWheel);
Â  Â  Â  if (animationTimeline.current) {
Â  Â  Â  Â  animationTimeline.current.kill();
Â  Â  Â  }
Â  Â  };
Â  }, [nextSlide, prevSlide]); 

// --- CONTENT UPDATE EFFECT (UNMODIFIED) ---
Â  const currentSlide = slides[activeIndex] || {};

Â  useEffect(() => {
Â  Â  gsap.fromTo(
Â  Â  Â  containerRef.current.querySelector(".slide-content"), 
Â  Â  Â  { autoAlpha: 0, y: 30 },
Â  Â  Â  { autoAlpha: 1, y: 0, duration: 0.6, ease: "power2.out" }
Â  Â  );
Â  }, [activeIndex]);

Â  return (
Â  Â  <div className="image-slider-section" ref={containerRef}>
Â  Â  Â  {/* 1. Content Wrapper (dynamic) */}
Â  Â  Â  <div className="slide-content-wrapper">
Â  Â  Â  Â  <div className="slide-content">
Â  Â  Â  Â  Â  <h3>{currentSlide.title}</h3>
Â  Â  Â  Â  Â  <div className="meta">
Â  Â  Â  Â  Â  Â  <div><strong>COMMUNITY</strong><p>{currentSlide.community}</p></div>
Â  Â  Â  Â  Â  Â  <div><strong>EXPANSION</strong><p>{currentSlide.expansion}</p></div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* 2. Slide Images (animated by GSAP) */}
Â  Â  Â  {slides.map((slide, index) => (
Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  className="slide-wrapper" 
Â  Â  Â  Â  Â  Â  key={index} 
Â  Â  Â  Â  Â  Â  ref={el => {
Â  Â  Â  Â  Â  Â  Â  Â  slidesRef.current[index] = el;
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  > 
Â  Â  Â  Â  Â  Â  <div className="slide"><img src={slide.img} alt={slide.title} /></div>
Â  Â  Â  Â  </div>
Â  Â  Â  ))}

Â  Â  Â  {/* 3. Controls Container (UNMODIFIED) */}
Â  Â  Â  <div className="controls-container">
Â  Â  Â  Â  <div className="pagination">
Â  Â  Â  Â  Â  <span>{String(activeIndex + 1).padStart(2, "0")}</span>/
Â  Â  Â  Â  Â  <span>{String(slides.length).padStart(2, "0")}</span>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="nav-buttons">
Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  className="nav-button" 
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Previous Slide" 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={prevSlide}
Â  Â  Â  Â  Â  Â  >&lt;</button>
Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  className="nav-button" 
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Next Slide" 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={nextSlide}
Â  Â  Â  Â  Â  Â  >&gt;</button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};